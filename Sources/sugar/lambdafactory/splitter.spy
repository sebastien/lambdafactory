@module lambdafactory.splitter
@import os

@shared SNIP_START = "8< ---["
@shared SNIP_END   = "]---"
@shared SNIP       =  (SNIP_START + "%s" + SNIP_END)

#------------------------------------------------------------------------------
#
#  File Splitter
#
#------------------------------------------------------------------------------

@class FileSplitter
| Some languages (like Java or ActionScript) may generate multiple files
| for one single module. The FileSplitter makes it easy for front-end to
| produce multiple file from a single file or text generated by the
| LambdaFactory back-end writers.

	@property outputDir
	@property currentFilePath
	@property currentFile

	@constructor outputPath
	| Initializes the file splitter with the given output directory
		outputDir = outputDir
	@end

	@method start
	| Callback invoked when a 'fromXXX' method is invoked.
		currentFilePath = None
		currentFile     = None
	@end

	@method end
	| allback invoked after a 'fromXXX' method was invoked
		currentFile close()
		currentFilePath = None
		currentFile     = None
	@end

	@method newFile path
		var path    = os path join(outputDir, path)
		var parents = os path dirname(path)
		if not os path exists(parents)
			os makedirs(parents)
		end
		currentFile = file(path, 'w')
	@end

	@method writeLine line
	| Writes the given line to the current file
		if currentFile is None
			raise ERR_MUST_START_WITH_SNIP
		else
			currentFile write(line)
		end
	@end

	@method fromStream stream, addEOL=False
		start()
		for line in stream
			var i = line find(SNIP_START)
			var j = line rfind(SNIP_END)
			if i >= 0 and j > i and j >= len(line) - 1 - len(SNIP_END)
				var path = line[i + len(SNIP_START):j]
				newFile(path)
			else
				writeLine(line + (addEOL and "\n" or ""))
			end
		end
		# FIXME: This may cause problem
		end()
	@end

	@method fromLines lines, addEOL=False
		return fromStream(lines, addEOL)
	@end

	@method fromString text
		return fromLines(text split("\n"), addEOL=True)
	@end

@end

# EOF

