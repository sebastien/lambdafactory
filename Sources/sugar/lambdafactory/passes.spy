@module lambdafactory.passes
@import lambdafactory.reporter as reporter
@import lambdafactory.interfaces as interfaces
@import json

# ============================================================================
#
# PASS CONTEXT
#
# ============================================================================

@class PassContext
| The 'PassContext' represents the current state of one or more passes when
| walking the program. It offers access to the 'environment' (gives access
| to the program and various passes) but more importantly gives access
| to _dataflow-related primitives_ which allow you to resolve symbols
| an interrogate contexts.
|
| NOTE that a single pass context can be shared among various passes.

	@property environment = None
	@property context     = []
	@property programPass = None
	@property program     = None

    # REWRITE: @constructor reporter=reporter.DefaultReporter
	@constructor environment=None, programPass=None
		self environment = environment
		self programPass = programPass
		if environment
			self program = environment program
		end
	@end

	@method setEnvironment environment
		self environment = environment
	@end

	@method setPass programPass
		self programPass = programPass
	@end

	@method run program
		assert (self program == None)
		self program = program
		walk ( program )
		self program = None
	@end

	@method handle element
	| Handles a sungle element, without recursing through its children
		var handle = programPass getHandler(element)
		if handle
			return handle (element)
		else
			return None
		end
	@end

	@method walk element
	| Walks the given element, recursively walking the child elements when the
	| handler does not return False
		pushContext (element)
		var continue_walking = True
		# We iterate on the program passes, if every pass
		# FIXME: There should be only one pass/context
		var handle = programPass getHandler(element)
		if handle
			# TODO: Optimize by removing passes not interested in
			# going deeper
			if handle (element) != False
				continue_walking = True
			end
		end
		# FIXME: Elements should offer a 'walk' interface
		# If we continue the walking, then we recurse on context slots and
		# in operations (if we're in a process).
		if continue_walking != False
			walkChildren (element)
		end
		popContext ()
	@end

	@method walkChildren element
	| Walks the children of the given element
		# Is the element a Program ? -> walk modules
		if isinstance(element, interfaces IProgram)
			for module in element getModules()
				walk (module)
			end
		end
		# Is the element a Context ? -> walk slots
		if isinstance(element, interfaces IContext)
			for name_and_value in element getSlots()
				walk (name_and_value[1])
			end
		end
		# Is the element a Process ? -> walk operations
		if isinstance(element, interfaces IProcess)
			for operation in element getOperations()
				walk (operation)
			end
		end
		# Is the element an Operation ? -> walk arguments
		if isinstance(element, interfaces IOperation)
			for op_arg in element getOpArguments()
				# TODO: Rewrite me
				if type(op_arg) in [tuple, list]
					for arg in op_arg
						assert (isinstance(arg, interfaces IElement))
						walk(arg)
					end
				else
					walk (op_arg)
				end
			end
		end
		# Is the element a List? -> walk values
		if isinstance(element, interfaces IList)
			for v in element getValues ()
				walk (v)
			end
		end
		# Is the element a Dict? -> walk key & values
		if isinstance(element, interfaces IDict)
			for v in element getItems ()
				walk (v[0])
				walk (v[1])
			end
		end
		# NOTE: Added 2016-03-08
		# Is the element an Argument ? -> walk value
		if isinstance(element, interfaces IArgument)
			walk (element getValue ())
		end
	@end

	@group ContextAccessors

		@method pushContext value
			context append (value)
		@end

		@method popContext
			context pop ()
		@end

		@method filterContext interface
		@as internal
			@embed Python
			|return filter(lambda x:isinstance(x,interface), self.context)
			@end
		@end

		@method filter list, interface
		@as internal
			@embed Python
			|return filter(lambda x:isinstance(x,interface), list)
			@end
		@end

		@method findInContext interface
		@as internal
			# FIXME: Should be findLikeInContext...
			var res = filterContext(interface)
			if res
				return res[-1]
			else
				return None
			end
		@end

		@method indexInContext value
			# FIXME: Should be find
			@embed Python
			|for i,e in enumerate(self.context):
			|	if e is value:
			|		return i
			@end
			return -1
		@end


		@method indexLikeInContext interface
			# FIXME: Should be find
			@embed Python
			|for i,e in enumerate(self.context):
			|	if isinstance(e,interface):
			|		return i
			@end
			return -1
		@end

		@method lastIndexInContext interface
			# FIXME: Should be rfind
			var i = len(context) - 1
			while i >= 0
				var v = context[i]
				if isinstance (v, interface)
					return i
				end
				i -= 1
			end
			return -1
		@end

		@method getParentElement
		@as alias
			return context[-2]
		@end

		@method hasParentElement
			return len(context) > 1
		@end

		@method getCurrentElement
		@as alias
			return context[-1]
		@end

		@method getProgram
		@as alias
			return program
		@end

		@method getFactory
		@as alias
			return environment getFactory()
		@end

		@method isIn interface
			return findInContext (interface ) != None
		@end

		@method getCurrentClosure
			return findInContext (interfaces IClosure)
		@end

		@method getCurrentFunction
			return findInContext (interfaces IFunction)
		@end

		@method getCurrentModule
			return findInContext (interfaces IModule)
		@end

		@method getScopeName limit=-1
			var r = []
			for _ in context[0:limit]
				if isinstance(_, interfaces IReferencable)
					var n = _ getName ()
					if n
						r append (_ getName ())
					end
				end
			end
			return "." join (r)
		@end

		@method getCurrentDataFlow
			var i = len(context) - 1
			while i >= 0
				var dataflow = context[i] getDataFlow()
				if dataflow
					return dataflow
				end
				i -= 1
			end
			return None
		@end

		@method getCurrentName index=0
			var i = len(context) - 1 + index
			while i >= 0
				var c = context[i]
				if isinstance (c, interfaces IReferencable)
					var n = c getName ()
					if n
						return n
					end
				end
				i -= 1
			end
			return None
		@end

		@method getCurrentMethod
			return findInContext (interfaces IMethod)
		@end

		@method getCurrentContext
			return findInContext (interfaces IContext)
		@end

		@method getCurrentClass
			return findInContext (interfaces IClass)
		@end

		@method getCurrentProcess
			return findInContext (interfaces IProcess)
		@end

		@method getCurrentClassParents
			return getClassParents (self getCurrentClass())
		@end

		@method getClassParents theClass
			var parents = []
			if not theClass
				return tuple ([])
			end
			var current_class = theClass
			# The given class can be either a class object or a reference
			assert (isinstance(theClass, interfaces IClass))
			for parent_class_ref in current_class getParentClassesRefs ()
				var parent_class_name = parent_class_ref getReferenceName ()
				# NOTE: We resolve in the parent dataflow to avoid resoling the parent class name
				# in case such as @class Application: Application with @import Application from app
				var resolution = resolve ( parent_class_name, current_class getDataFlow () parent)
				if not resolution[1]
					resolution = resolveAbsolute (parent_class_name)
				end
				# We resolve the parent_class_name in the 'current_class' parent context, as resolving
				# directly in class may have context clashes (like you have an operation or attribute
				# with the same name as the parent_class_name).
				var slot, parent_class = resolution
				# TODO: assert parent
				if parent_class
					assert (isinstance(parent_class, interfaces IClass))
					parents append (parent_class)
				else
					# Here we add the reference anyway, even if the class is not resolved
					parents append (parent_class_ref)
					environment report error ("Unable to resolve parent class:", parent_class_name, "from", current_class getName())
				end
			end
			return parents
		@end

		@method getCurrentClassAncestors
			return getClassAncestors (self getCurrentClass())
		@end

		@method getClassAncestors theClass=None
			var ancestors = []
			if not theClass
				return tuple([])
			end
			assert (isinstance(theClass, interfaces IClass))
			var parents = getClassParents(theClass)
			for parent in parents
				# FIXME: This is necessary, so I'm not sure this works
				# properly...
				if isinstance(parent, interfaces IReference)
					# IF we have a reference
					self environment report error ("Cannot resolve reference to class", parent getReferenceName () )
					pass
				if not (parent in ancestors)
					for ancestor in getClassAncestors(parent)
						if not (ancestor in ancestors)
							ancestors append(ancestor)
						end
					end
				end
			end
			ancestors extend(parents)
			return ancestors
		@end

	@end

	@method annotate value, name, content=None
		value addAnnotation (environment factory annotation (name, content))
	@end

	@group Resolution

		@method resolve referenceOrName, contextOrDataFlow=None
		| Resolves the given 'IReference' or String sing the given context
		| ('IContext') or dataflow ('IDataFlow'). This usually requires that
		| you've applied a pass to create the dataflow (see the
		| 'lambdafactory.resolution.BasicDataFlow' pass).
			if contextOrDataFlow is None
				contextOrDataFlow = getCurrentDataFlow()
			if isinstance( contextOrDataFlow, interfaces IElement )
				contextOrDataFlow = contextOrDataFlow getDataFlow()
			end
			if isinstance(referenceOrName, interfaces IReference)
				referenceOrName = referenceOrName getReferenceName()
			end
			if contextOrDataFlow
				return contextOrDataFlow resolve (referenceOrName)
			else
				# TODO: Issue a warning because the resolution pass was not made
				return [None, None]
			end
		@end

		@method resolveAbsolute referenceOrName
		| Resolves the given reference or string expressed in absolute style
		|('.'-separated list of names), starting from the root dataflow (the program
		| dataflow).
			var program          = getProgram()
			assert (program)
			var program_dataflow = program getDataFlow()
			var slot_and_value   = None
			var matching_module  = None
			if not program_dataflow
				raise ERR_NO_DATAFLOW_AVAILABLE
			end
			if isinstance(referenceOrName, interfaces IReference)
				referenceOrName = referenceOrName getReferenceName()
			end
			# We get the module with the name that matches most of the reference
			# name. This allows for absolute module names like (a.b.c) even if
			# module `a` has a slot named `b`. The result of this section is
			# that `matching_module` will reference the module with the longest
			# name that prefixes the current reference.
			# FIXME: There might be some edge cases with functions having the
			# same name as a child module (then creating ambiguity)
			for module in program getModules()
				var mname       = module getName()
				var mname_len   = len(mname)
				# DEBUG:
				#environment report info ("LOOKING FOR ", referenceOrName, "in", mname, matching_module)
				if mname == referenceOrName
					matching_module = module
					return tuple([None, module])
				end
				# We see if the referenceOrName starts with the current module
				# name, meaning it is a submodule.
				var match_index = referenceOrName find (mname)
				if match_index == 0 and referenceOrName startswith (mname) and referenceOrName[mname_len] == "."
					if not matching_module
						matching_module = module
					if len(module getName()) > len(matching_module getName())
						matching_module = module
					end
				end
			end
			if not matching_module
				# We haven't found a matching module, in which case
				# we return (None, None)
				return tuple([None,None])
			else
				var symbol_name = referenceOrName[len(matching_module getName ())+1:]
				# We do a resolution from the current data flow
				slot_and_value = matching_module getDataFlow () resolve (symbol_name)
				return slot_and_value
			end
		@end

		@method resolveAbsoluteOrLocal referenceOrName, contextOrDataFlow=None
		| Tries an absolute resolution first, then will look in the local scope if
		| it fails.
			var slot_and_value = resolveAbsolute (referenceOrName)
			if not slot_and_value[0]
				return resolve(referenceOrName, contextOrDataFlow)
			else
				return slot_and_value
			end
		@end

		@method resolveLocalOrAbsolute referenceOrName, contextOrDataFlow=None
		| Tries a local resolution first, then will look in the program scope if
		| it fails.
			var slot_and_value = resolve (referenceOrName, contextOrDataFlow)
			if not slot_and_value[0]
				return resolveAbsolute (referenceOrName)
			else
				return slot_and_value
			end
		@end

	@end

@end

# ============================================================================
#
# ABSTRACT PASS
#
# ============================================================================

# FIXME: Maybe we should aggregate PassContext and Pass... have to study this in
# detail
@class Pass: PassContext

	@shared   HANDLES  = []
	@shared   NAME     = ""

	@property options  = {}

	@constructor
		PassContext __init__ (self)
		setPass(self)
	@end

	@method getHandler element:IElement
	| Tells if the pass handles the given element. This basically iterates
	| on the 'handles' property values (which are interfaces), when one
	| interface matches the given 'element', then the corresponding 'onXXX'
	| method is invoked, where 'XXX' is the interface
	| name (without the leading 'I').
		for interface in HANDLES
			# REWRITE: element is an interface
			if isinstance(element, interface)
				# REWRITE return self `(interface getClass() getName())
				var handler_name = "on" + interface __name__ [1:]
				if not hasattr(self, handler_name)
					self environment report error ("Handler does not define pass for:", handler_name)
					raise ERR_PASS_HANDLER_NOT_DEFINED(handler_name)
				end
				return getattr(self, handler_name )
			end
		end
		return None
	@end

	@method getName
	| Returns the name of this pass
		return NAME
	@end

@end

# ============================================================================
#
# GLOBAL RUNTIME PASS
#
# ============================================================================

@class ExtendJSRuntime: Pass
| This pass is like an importation and will simply bind the symbols

	@shared HANDLES  = [ interfaces IProgram, interfaces IModule]
	@shared NAME     = "GlobalRuntime"
	@shared FUNCTIONS = [
		"access"
		"asMap"
		"assert"
		"car"
		"cdr"
		"Class"
		"cmp"
		"copy"
		"createMapFromItems"
		"debug"
		"equals"
		"error"
		"extendPrimitiveTypes"
		"filter"
		"find"
		"findLike"
		"findOneOf"
		"first"
		"foldl"
		"getChildrenOf"
		"getClass"
		"getClasses"
		"getClassOf"
		"getMethod"
		"getMethodOf"
		"getParentClass"
		"getSuperMethod"
		"getType"
		"greater"
		"invoke"
		"isDefined"
		"isUndefined"
		"isFunction"
		"isIn"
		"isInstance"
		"isIterable"
		"isList"
		"isMap"
		"isNumber"
		"isObject"
		"isString"
		"items"
		"iterate"
		"keys"
		"last"
		"len"
		"map"
		"merge"
		"Module"
		"pairs"
		"print"
		"Protocol"
		"range"
		"reduce"
		"replace"
		"Singleton"
		"slice"
		"sliceArguments"
		"smaller"
		"sorted"
		"sprintf"
		"str"
		"strip"
		"type"
		"values"
		"warning"
	]

	@property runtime

	@constructor
		Pass __init__ (self)
	@end

	@method onProgram program
		runtime = environment factory createModule ("extend")
		runtime addAnnotation (environment factory annotation ("shadow"))
		for f in FUNCTIONS
			var fun = environment factory createFunction (f)
			fun addAnnotation (environment factory annotation ("shadow"))
			runtime setSlot (f, fun)
		end
		program addModule (runtime)
	@end

	@method onModule module
		var imports = module getImportOperations()
		@embed Python
		|assert self.runtime, "No runtime defined in ExtendJSRuntime pass"
		@end
		module addImportOperation (environment factory importSymbols (runtime getSlotNames(), runtime getAbsoluteName ()))
		return False
	@end

@end

# ============================================================================
#
# IMPORTATION PASS
#
# ============================================================================

@class Importation: Pass
| The importation pass will look for importation operations ('IImportation'),
| will try to resolve the importations (according to the current environment)
| and will trigger the loading and parsing of each module into the current
| program.

	@shared HANDLES = [ interfaces IModule ]
	@shared NAME    = "Importation"

	@constructor
		Pass __init__ (self)
	@end

	@method onModule module
		var imports = module getImportOperations()
		for i in imports
			var imported_modules = []
			# We parse the imports and import the corresponding modules
			if isinstance(i, interfaces IImportModuleOperation)
				var imported_module_name   = i getImportedModuleName()
				var imported_module_origin = i getAlias()
				if not program hasModuleWithName (imported_module_name)
					imported_modules append (environment importModule (imported_module_name))
				end
			elif isinstance(i, interfaces IImportModulesOperation)
				for imported_module_name in i getImportedModuleNames ()
					if not program hasModuleWithName (imported_module_name)
						imported_modules append (environment importModule (imported_module_name))
					end
				end
			elif isinstance(i, interfaces IImportSymbolOperation)
				var imported_module_name = i getImportOrigin()
				if not program hasModuleWithName (imported_module_name)
					imported_modules append (environment importModule (imported_module_name))
				end
			elif isinstance(i, interfaces IImportSymbolsOperation)
				var imported_module_name = i getImportOrigin()
				if not program hasModuleWithName (imported_module_name)
					imported_modules append (environment importModule (imported_module_name))
				end
			else
				environment report error ("Importation pass: operation not implemented " + repr(i))
			end
			# If the imported module is not in the program, then we add it.
			for m in imported_modules
				if m and (not program hasModule (m))
					program addModule (m)
				end
			end
		end
		return False
	@end

@end

# ============================================================================
#
# DOCUMENTATION PASS
#
# ============================================================================

@class DocumentationPass: Pass
| The documentation pass will run SDoc on all the modules declared in this
| program, creating an HTML file.

	@shared   HANDLES = [
		interfaces IModule
		interfaces IModuleAttribute
		interfaces IClass
		interfaces IClassAttribute
		interfaces IClassMethod
		interfaces IAttribute
		interfaces IMethod
		interfaces IFunction
	]

	@shared   NAME    = "Documentation"

	@property doc     = []
	@property _module = None
	@property _class  = None
	@property texto   = None
	@property writer  = None

	@constructor args=[]
		Pass __init__ (self)
		@embed Python
		|import texto.main
		|self.texto = lambda _:texto.main.text2htmlbody(unicode(_))
		@end
	@end

	@method setWriter writer
		self writer = writer
	@end

	@method onModule module
		var m = _base (module)
		m update {
			imports    : []
			classes    : []
			attributes : []
			functions  : []
			shared     : []
		}
		doc append (m)
		_module = m
	@end

	@method onClass element
		var p = []
		for _ in element getParentClassesRefs ()
			p append (_ getReferenceName ())
		end
		var c = _base (element)
		c update  {
			parents    : p
			shared     : []
			operations : []
			attributes : []
			methods    : []
		}
		_module ["classes"] append (c)
		_class = c
	@end

	@method onModuleAttribute element
		var e = _attribute (element)
		_module ["attributes"] append (e)
	@end

	@method onClassAttribute element
		var e = _attribute (element)
		_class ["shared"] append (e)
	@end

	@method onAttribute element
		var e = _attribute (element)
		(_class or _module) ["attributes"] append (e)
	@end

	@method onClassMethod element
		var e = _function (element)
		_class ["operations"] append (e)
	@end

	@method onMethod element
		var e = _function (element)
		_class ["methods"] append (e)
	@end

	@method onFunction element
		var e = _function (element)
		_module ["functions"] append (e)
	@end

	@method _base element
		var e = {
			type    : getType (element)
			name    : element getName ()
			doc     : getDocumentation (element)
			scope   : getScopeName ()
			source  : element getSourcePath ()
			offsets : element getOffsets    ()
		}
		return e
	@end

	@method _attribute element
		var e = _base (element)
		e ["value"] = writeValue (element)
		return e
	@end

	@method _function element
		var e         = _base (element)
		e ["value"]   = None
		var p = []
		for _ in element getParameters ()
			p append {
				name  : _ getName ()
				scope : getScopeName ()
				value : writeValue (None)
			}
		end
		return e
	@end

	@method writeValue element
		if not writer
			return None
		elif element
			var source = writer run (element)
			return source
		else
			return None
		end
	@end

	@method getType element
		return element __class__ __name__ rsplit (".", 1) [-1] lower ()
	@end

	@method getDocumentation element
		var doc = element getDocumentation ()
		if doc
			return texto (doc content)
		else
			return None
		end
	@end

	@method asJSON title=None
	| Returns the HTML document generated by this pass
		return json dumps (doc)
	@end

@end

# ============================================================================
#
# TRANSFORM ASYNCHRONOUS INVOCATIONS PASS
#
# ============================================================================

@class TransformAsynchronousInvocations: Pass

	@shared HANDLES = [ interfaces IClosure ]
	@shared NAME    = "AsynchronousInvocationsExpansion"
@end

# ============================================================================
#
# COUNT REFERENCES PASS
#
# ============================================================================

@class CountReferences: Pass
| This pass adds "refcount" and "referers" annotations to all the referenced
| elements by handling every 'IReference' element.
|
| This is the first pass to be applied before actually removing the dead
| code.

	@shared   HANDLES = [
		interfaces IReference
		interfaces IFunction
		interfaces IElement
	]
	@shared   NAME    = "CountReferences"

	@method addReferer element, context=(self getCurrentContext ())
		var refcount = element getAnnotation "refcount"
		var referers = element getAnnotation "referers"
		if refcount
			refcount setContent (refcount getContent () + 1)
			referers getContent () append (context)
		else
			self annotate (element, "refcount", 1)
			self annotate (element, "referers", [context])
		end
	@end

	@method onFunction element
		if element getName () == interfaces Constants ModuleInit
			# This is a trick to make sure that this will be "sticky"
			addReferer (element, element)
		end
	@end

	@method onReference reference
		if self isIn (interfaces IOperation)
			var slot_and_value = self resolve (reference)
			var value          = slot_and_value[1]
			if value
				addReferer (value)
			end
		end
	@end

	@method onElement element
		# Just a generic handle for element
	@end

@end

# ============================================================================
#
# DEAD CODE REMOVAL PASS
#
# ============================================================================

@class RemoveDeadCode: Pass

	@shared   HANDLES = [
		interfaces IConstruct
		interfaces IElement
	]

	@shared   NAME    = "RemoveDeadCode"

	@method onConstruct value
	| For every construct, we see if there is a refcount or not, and we
	| see if at least one referer has a refcount. If it's not the case,
	| then the value will be shadowed, and its refcount set to 0.
		var actual_count = 0
		var refcount     = value getAnnotation "refcount"
		var referers     = value getAnnotation "referers"
		if refcount
			referers = referers getContent ()
			for r in referers
				var r_refcount = r getAnnotation "refcount"
				if r_refcount and r_refcount getContent () > 0
					actual_count += 1
				end
			end
			if actual_count == 0
				self annotate (value, "shadow")
				refcount setContent 0
			else
				for element in self context
					element removeAnnotation "shadow"
				end
			end
		else
			self annotate (value, "shadow")
		end
	@end

	@method onElement element
		# Just a generic handle for element
	@end
@end

# EOF
