@module lambdafactory.resolution
@import lambdafactory.interfaces as interfaces
@import Pass from lambdafactory.passes
@import re, math

@shared LETTERS = "abcdefghijklmnopqrstuvwxyz"

# ============================================================================
#
# BASIC DATAFLOW
#
# ============================================================================

@class BasicDataFlow: Pass
| The basic dataflow pass will associate DataFlow objects to elements which
| don't have any already, and will make sure that Context slots are defined
| in the dataflow, as well as allocations.
|
| It is safe to apply this pass more than once on the program, but as it will
| keep the existing dataflow information, you should make sure that if you
| modified the program model in the meantime, you clear the dataflow out of the
| elements that you changed.
|
| TODO: Implement an 'invalidateDataFlow' when an operation is replaced/deleted,
| so that we ensure that the DF remains consitent.
|
| Rules:
|
| - DataFlows are created for Context and Processes
| - DataFlowSlots begin with nothing or an allocation
| - DataFlowSlots operations are the operations that reference the slot (stage 2)
|
| Stages:
|
| 1) Create dataflows for Contexts, Processes, Importations and Allocations
| 2) Properly flow classes (so that resolution in parents can happen)
| 3) Attaches operations that reference a value to the original slot (this
|    prepares the path for the typing pass)

	@shared RE_IMPLICIT = re compile ("^_[0-9]?$")
	@shared HANDLES = [
		interfaces IProgram
		interfaces IModule
		interfaces IClass
		interfaces IMethod
		interfaces IClosure
		interfaces IBlock
		interfaces IProcess
		interfaces IContext
		interfaces IAllocation
		interfaces IAssignment
		interfaces IIteration
		interfaces IChain
		interfaces ISelection
		interfaces IOperation
		interfaces IAnonymousReference
		interfaces IImplicitReference
		interfaces IReference
		interfaces IValue
	]

	@shared NAME    = "Resolution"

	@constructor
		Pass __init__ (self)
	@end

	@method getParentDataFlow
	| Returns the dataflow of the parent element. It is supposed to exist.
		if self hasParentElement()
			# The current data flow is context[-1], the parent is [-2]
			var i = len(context) - 2
			while i >= 0
				var d = context[i] getDataFlow ()
				if d
					return d
				end
				i -= 1
			end
			return None
		else
			return None
		end
	@end

	@method ensureDataFlow element
	| Ensures that the given element has an attached DataFlow
		var dataflow = element getDataFlow()
		if not dataflow
			dataflow = self getFactory() createDataFlow (element)
			var parent_df = getParentDataFlow()
			@embed Python
			|if (self.hasParentElement()) and (not parent_df):
			|	sys.stderr.write(" create dataflow for {0}:{1}\n".format(element,self.getParentDataFlow()))
			@end
			dataflow setParent (parent_df)
			element setDataFlow( dataflow )
		end
		return dataflow
	@end

	@method _ensureAnnotationsDataflow element
		for _ in element getAnnotations "where"
			ensureDataFlow (_ getContent ())
		end
	@end

	@method onProgram element
		# Programs have thir own dataflows
		var dataflow = ensureDataFlow (element)
		# FIXME: Factor this in some specific file
		dataflow declareEnvironment("Undefined", None)
		dataflow declareEnvironment("True",      None)
		dataflow declareEnvironment("False",     None)
		dataflow declareEnvironment("Null",      None)
		# TODO: Should have NaN, Nothing, Error, None (remove Null)
		# TODO: We register modules in the dataflow
	@end

	@method onModule element
		# Modules have thir own dataflows
		var dataflow = ensureDataFlow (element)
		onContext(element)
		_ensureAnnotationsDataflow (element)
	@end

	@method onType element
		pass
	@end

	@method onEnumerationType element
		ensureDataFlow (element)
		for _ in element getSymbols ()
			var df = ensureDataFlow (_)
			df declareLocal (_ getName (), _)
		end
	@end

	@method onClass element
		# Programs have thir own dataflows
		var dataflow = ensureDataFlow (element)
		dataflow declareEnvironment("super", None)
		dataflow declareEnvironment("self", None)
		onContext(element)
	@end

	@method onMethod element
		# Programs have thir own dataflows
		var dataflow = ensureDataFlow (element)
		dataflow declareEnvironment("super", None)
		dataflow declareEnvironment("self", None)
		onClosure(element)
	@end

	@method onClosure element
		var dataflow = ensureDataFlow (element)
		for argument in element getArguments()
			dataflow declareArgument(argument getName(), argument)
		end
		_ensureAnnotationsDataflow (element)
	@end

	@method onBlock element
		if isinstance (element parent, interfaces IMatchOperation)
			# If the block is withing a match expression, then the dataflow
			# is the same as the parent
			element setDataFlow (element parent dataflow)
		else
			let dataflow = ensureDataFlow (element)
		end
	@end

	@method onProcess element
		# Processes have their own dataflows
		var dataflow = ensureDataFlow (element)
		_ensureAnnotationsDataflow (element)
	@end

	@method onContext element
		# Contexts have their own dataflows
		var dataflow = ensureDataFlow (element)
		for name_and_value in element getSlots()
			dataflow declareLocal (name_and_value[0], name_and_value[1], element)
		end
	@end

	@method onAllocation element
		onOperation(element)
		var dataflow = element getDataFlow()
		var name = element getSlotToAllocate() getName()
		dataflow declareLocal( name, element getDefaultValue(), element)
	@end

	@method onAssignment element
		var dataflow = element getDataFlow()
		if not dataflow
			dataflow = getParentDataFlow()
			element setDataFlow(dataflow)
		end
		var t = element getTarget ()
		if isinstance(t, interfaces IReference)
			# If we assign a reference, we try to resolve it. If it doesn't
			# resolve, then there is a problem, but we're not going to warn
			# users here.
			var name  = t getReferenceName ()
			var slots = resolve (name)
			if slots and slots[0]
				# We find the element which declared the element that
				# we resolved.
				var slot  = slots[0]
				var scope = slot getDataFlow () getElement ()
				# Now, if we are within a closure that is declared after
				# the element allocating the slot, we annotate the
				# closure saying that it "mutates" the given slot.
				var i     = indexInContext (scope)
				var j     = lastIndexInContext (interfaces IClosure)
				if i < j
					context[j] declareMutation (name, slot)
				end
			end
		end
	@end

	@method onOperation element
		var dataflow = element getDataFlow()
		if not dataflow
			dataflow = getParentDataFlow()
			element setDataFlow (dataflow)
		end
		return dataflow
	@end

	@method onValue element
		var dataflow = element getDataFlow()
		if not dataflow
			dataflow = getParentDataFlow()
			element setDataFlow(dataflow)
		end
	@end

	@method onIteration element
	| We make sure to add `encloses` annotation to closures in iterations
		var closure = element getClosure ()
		onOperation (element)
		if isinstance(closure, interfaces IClosure)
			onClosure (closure)
			for p in closure getParameters ()
				var name  = p getName ()
				var slots = resolve (name)
				if slots and slots[0]
					closure declareEnclosure (name, slots[0])
				end
			end
		end
	@end

	@method onSelection element
		onOperation (element)
		let implicit = element getImplicitValue ()
		if implicit
			let slot = element dataflow declareImplicit (implicit, element)
		end
	@end

	@method onChain element
		onOperation (element)
		let implicit = element getImplicitValue ()
		if implicit
			let slot = element dataflow declareImplicit (implicit, element)
		end
	@end

	@method getAnonymousName i
		let l = len(LETTERS)
		if i < l
			return LETTERS[i]
		else
			return getAnonymousName(int(i/l) - 1) + getAnonymousName( i % l )
		end
	@end

	@method getAnonymousReferenceName
	| Gets the first anonymous reference name
		i = 0
		while True
			var n = getAnonymousName (i)
			var s = resolve (n)
			if not s[0]
				return n
			end
			i    += 1
		end
	@end

	@method onAnonymousReference element
	| Finds a name for the anonymous reference that does not conflict with
	| anything in scope.
		let dataflow = getCurrentDataFlow ()
		let name     = getAnonymousReferenceName ()
		dataflow declareLocal (name, None, element)
		element setReferenceName (name)
	@end

	@method onImplicitReference element
		element setReferenceName (getCurrentDataFlow () getImplicitSlotFor (element getElement ()) getName ())
	@end

	@method onReference element
		# If a reference is made withing a closure that is not the iteration's
		# or repetition's closure, then we need to close the scope over the closure.
		var i  = lastIndexInContext (interfaces IClosure)
		var j  = lastIndexInContext (interfaces IIteration)
		var jj = lastIndexInContext (interfaces IRepetition)
		var name  = element getName ()
		# We handle implicit references to a closure argument
		# NOTE: Here we mean _, _0, _1â€¥ as implicit references, not the
		# IImplicitReference types.
		if i>=0 and RE_IMPLICIT match (name)
			var slot = resolve (element)
			if not slot[0]
				var n        = 0
				if len(name) > 1 -> n = int(name[1:])
				var closure  = context[i]
				var dataflow = closure dataflow
				var parameters = closure parameters
				# We ensure that the closure has N parameters
				while len(parameters) <= n
					var l = len(parameters)
					var p = environment factory _param ("_" + str(l))
					parameters append (p)
					if dataflow
						dataflow declareArgument (p getName (), p)
					end
				end
				# We rewrite the reference to match the parameter name
				var p = parameters[n]
				name  = p getName ()
				element setReferenceName (name)
			end
		end
		if i and ((i > jj and jj >= 0) or (i > (j + 1) and j >= 0))
			# We have a reference within a closure that references a scope
			# nested in a loop. Because JS has no nested scope, we'll flag
			# it explicitely using the `encloses` annotation.
			var slots = resolve (name)
			if j == -1
				j = jj
			end
			if slots and slots[0]
				var slot  = slots[0]
				var scope = slot getDataFlow () getElement ()
				var k     = indexInContext (scope)
				var c     = context[i]
				if scope and (k < i) and (j < k) and (not c hasMutation (name))
					# If the reference resolves outside of the closure we'll
					# need to wrap the creation of the closure. However,
					# if the closure *mutates* the slot, then we won't declare
					# a closure over it.
					# NOTE: We could still declare the annotation, but process
					# it diffently in the writers.
					c declareEnclosure (name, slots)
				end
			end
		end
	@end

@end

# ============================================================================
#
# CLEAR DATAFLOW
#
# ============================================================================

@class ClearDataFlow: Pass
| Cleares the dataflows from the elements

	@shared HANDLES = [
		interfaces IProgram
		interfaces IModule
		interfaces IClass
		interfaces IMethod
		interfaces IClosure
		interfaces IProcess
		interfaces IContext
		interfaces IAllocation
		interfaces IOperation
		interfaces IArgument
		interfaces IValue
	]

	@shared NAME    = "ClearDataflow"

	@constructor
		Pass __init__ (self)
	@end

	@method getParentDataFlow
	| Returns the dataflow of the parent element. It is supposed to exist.
		if self hasParentElement()
			return self getParentElement() getDataFlow()
		else
			return None
		end
	@end

	@method clearDataFlow element
	| Ensures that the given element has an attached DataFlow
		element setDataFlow (None)
	@end

	@method onProgram element
		clearDataFlow (element)
	@end

	@method onModule element
		clearDataFlow (element)
		_clearAnnotationsDataFlow (element)
	@end

	@method onClass element
		clearDataFlow (element)
		_clearAnnotationsDataFlow (element)
	@end

	@method onMethod element
		clearDataFlow (element)
		_clearAnnotationsDataFlow (element)
	@end

	@method onClosure element
		clearDataFlow (element)
	@end

	@method onProcess element
		clearDataFlow (element)
		_clearAnnotationsDataFlow (element)
	@end

	@method onContext element
		clearDataFlow (element)
		_clearAnnotationsDataFlow (element)
	@end

	@method onAllocation element
		clearDataFlow (element)
	@end

	@method onOperation element
		clearDataFlow (element)
	@end

	@method onArgument element
	@end

	@method onValue element
		clearDataFlow (element)
	@end

	@method _clearAnnotationsDataFlow element
		for _ in element getAnnotation "where"
			clearDataFlow (_)
		end
	@end

@end

# ============================================================================
#
# DATAFLOW BINDING
#
# ============================================================================

@class DataFlowBinding: Pass
| This pass will target classes, resolving their parent classes and binding the
| dataflow slot to the proper value. If the binding fails, an exception will be
| raised, meaning that either the passes were not set up properly, or that the
| resolution has failed (and there is an inconsistency in the program model).

	@shared FAILED         =  tuple([None,None])

	@shared HANDLES = [
		interfaces IModule
		interfaces IClass
		interfaces IContext
		interfaces IEnumerationType
	]
	@shared NAME    = "ClassParentsResolution"

	@constructor
		Pass __init__ (self)
	@end

	# FIXME: Arguments are messy
	@method _importSymbol operation, symbolName, fromModuleName, moduleDest, alias = None
		var module_name    = fromModuleName
		var symbol_name    = symbolName
		var element        = moduleDest
		var slot_and_value = self resolveAbsolute(module_name)
		var result         = {}
		var imported_name  = alias or symbol_name
		var df             = element getDataFlow ()
		# FIXME: This implementation is a bit messy
		if slot_and_value == FAILED
			self environment report error ("Imported module not found in scope:", module_name, "in", element getName())
		elif symbol_name == "*"
			# We import all the symbols defined in the module
			var imported_module = slot_and_value[1]
			for slot_name in imported_module getSlotNames ()
				result update (_importSymbol (operation, slot_name, fromModuleName, moduleDest))
			end
		else
			var symbol_slot_and_value = self resolve ( symbol_name, slot_and_value[1] )
			if symbol_slot_and_value == FAILED
				if fromModuleName != getCurrentModule () getAbsoluteName ()
					# We report an error only if we're importing from a different name
					self environment report error ("Symbol not found in module scope:", symbol_name, "in", module_name)
				end
				if not df hasSlot (imported_name)
					df declareImported (imported_name, None, operation)
				end
				result[imported_name] = None
			else
				var value         = symbol_slot_and_value[1]
				assert (df getElement() == element)
				if not df hasSlot (imported_name)
					# We only import the symbol if there is no slot defined
					df declareImported (imported_name, value, operation)
					assert (df resolve (imported_name)[0] getDataFlow() == df )
					assert (df resolve (imported_name)[0] getDataFlow() getElement() == element)
				end
				result[imported_name] = value
			end
		end
		return result
	@end

	@method _importModule module, operation, fullname, alias=None
		var imported       = {}
		var slot_and_value = self resolveAbsolute(fullname)
		if slot_and_value == FAILED
			self environment report error ("Imported module not found in scope:", fullname, "in", module getName())
		else
			var name = alias or fullname
			module getDataFlow() declareImported ( name, slot_and_value[1], operation)
			imported[name] = slot_and_value[1]
			assert (module getDataFlow() getElement() == module)
			assert (module getDataFlow() resolve (name)[0] getDataFlow() == module getDataFlow() )
			assert (module getDataFlow() resolve (name)[0] getDataFlow() getElement() == module)
		end
		return imported
	@end

	@method onEnumerationType element
		let df = getCurrentModule () getDataFlow ()
		for _ in element symbols
			df declareLocal (_ getName (), _, element)
		end
	@end

	@method onModule element
	| Processes the module import operations and adds them to the module
	| dataflow
		var imports = element getImportOperations()
		var imported = {}
		for i in imports
			if isinstance(i, interfaces IImportModuleOperation)
				imported update (_importModule (element, i, i getImportedModuleName (), i getAlias ()))
			elif isinstance(i, interfaces IImportModulesOperation)
				for n in i getImportedModuleNames ()
					imported update (_importModule (element, i, n))
				end
			elif isinstance(i, interfaces IImportSymbolOperation)
				var module_name = i getImportOrigin()
				var symbol_name = i getImportedElement()
				var alias = i getAlias()
				# FIXME: Arguments are messy
				imported update (_importSymbol (i, symbol_name, module_name, element, alias))
			elif isinstance(i, interfaces IImportSymbolsOperation)
				var module_name = i getImportOrigin()
				for s in i getOpArgument 0
					imported update (_importSymbol (i, s getImportedElement (), s getImportOrigin (), element, s getAlias ()))
				end
			else
				# TEST: When resolution works well, self should not be necessary
				self environment report error ("DataFlowBinding: operation not implemented " + repr(i))
			end
		end
		if element hasAnnotation "imported"
			element getAnnotation "imported" value update (imported)
		else
			element setAnnotation ("imported", imported)
		end
	@end

	@method onClass element
		# FIXME: This seems redundant with getClassParents()
		for parent_class in getClassParents (element)
			assert (parent_class != element)
			if isinstance(parent_class, interfaces IConstruct)
				assert (parent_class getDataFlow ())
				element getDataFlow () addSource (parent_class getDataFlow())
			elif isinstance(parent_class, interfaces IReference)
				self environment report error ("Unresolved parent class: " + parent_class getReferenceName () + " in " + element getAbsoluteName ())
			end
		end
	@end

	@method onContext element
		element dataflow ensureImplicitsNamed ()
	@end

@end

# EOF
