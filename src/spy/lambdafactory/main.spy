@module lambdafactory.main
| Command-line interface and main module for LambdaFactory
@import os, sys, optparse, tempfile
@import Environment from lambdafactory.environment
@import FileSplitter from lambdafactory.splitter
@import lambdafactory.passes as passes
@import lambdafactory.resolution as resolution
@import BytesIO, TextIOBase from io
@import sys

# TODO: languages should be backends

@function ensureOutput value, output=None
	@embed Python
	|if sys.version_info.major >= 3:
	|	# For Python-3 we expect streams to take unicode
	|	if output and isinstance(output, TextIOBase):
	|		return value.decode("utf8") if isinstance(value, bytes) else value
	|	else:
	|		return value.encode("utf8") if not isinstance(value, bytes) else value
	|else:
	|	# For Python-2 we expect streams to take bytes
	|	if isinstance(value,bytes): return str(value)
	|	return value.encode("utf8") if isinstance(value, unicode) else value
	@end
@end

# ------------------------------------------------------------------------------
#
# COMMAND
#
# ------------------------------------------------------------------------------

@class Command

	@shared OPT_LANG           = "Specifies the target language (js, java, pnuts, actionscript)"
	@shared OPT_OUTPUT         = "Specifies the output where the files will be generated (stdout, file or folder)"
	@shared OPT_VERBOSE        = "Verbose parsing output (useful for debugging)"
	@shared OPT_API            = "Generates SDoc API documentation (given the API filename)"
	@shared OPT_TEST           = "Tells wether the source code is valid or not"
	@shared OPT_DEFINE         = "Defines a specific target (for @specific)"
	@shared OPT_OPTIONS        = "Options for program transformation passes"
	@shared OPT_RUN            = "Directly runs the script (default)"
	@shared OPT_COMPILE        = "Compiles the given code to the output (current) directory"
	@shared OPT_RUNTIME        = "Outputs the runtime as well when compiled"
	@shared OPT_VERSION        = "Ensures that Sugar is at least of the given version"
	@shared OPT_SOURCE         = "Directly gives the source"
	@shared OPT_INCLUDE_SOURCE = "Includes source in compiled code"
	@shared OPT_CACHE          = "Uses compilation cache"
	@shared OPT_MODULE         = "Specifies the module name"
	@shared OPT_LIB            = "Specifies a file to be used as a library or a library directory"
	@shared OPT_INCLUDES       = "Specifies a file to be included in the copmilation output"
	@shared OPT_PREPROC        = "Applies the given preprocessor to the source"
	@shared OPT_IGNORES        = "Does not try to resolve the given modules"
	@shared OPT_PASSES         = "Specifies the passes used in the compilation process. Passes are identified by the class name which is expected to be found in either lambdafactory.passes or lambdafactory.resolution modules, or is given as an absolute class name."

	@property programName
	@property environment:Environment

	@constructor programName="lambdafactory"
		self programName = programName
		createEnvironment         ()
		environment loadLanguages ()
		setupEnvironment          ()
	@end

	@method runAsString args
	| Runs Sugar, but instead of printing the result to the given
	| output, it returns a Python string with the result. It is very useful
	| when embedding LambdaFactory somewhere.
		var output = new BytesIO ()
		run (args, output)
		return output getvalue() decode "utf-8"
	@end

	@method run arguments, output=sys stdout
		if type(arguments) != list
			arguments = list(arguments)
		end
		var status        = 0
		var option_parser = optparse OptionParser()
		var options       = []
		var args          = []
		@embed Python
		|option_parser.add_option("-r", "--run",  action="store_true", dest="run", default=True,
		|	help=self.OPT_RUN)
		|option_parser.add_option("-c", "--compile", action="store_true", dest="compile",
		|help=self.OPT_COMPILE)
		|option_parser.add_option("-R", "--runtime", action="store_true", dest="runtime",
		|help=self.OPT_RUNTIME)
		|option_parser.add_option("-l", "--lang", action="store", dest="lang",
		|	help=self.OPT_LANG)
		|option_parser.add_option("-o", "--output", action="store", dest="output",
		|	help=self.OPT_OUTPUT)
		|option_parser.add_option("-C", "--cache", action="store", dest="cache", default=True,
		|	help=self.OPT_CACHE)
		|option_parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
		|	help=self.OPT_VERBOSE)
		|option_parser.add_option("-m", "--module", action="store", dest="module",
		|	help=self.OPT_MODULE)
		|option_parser.add_option("-a", "--api", action="store", dest="api",
		|	help=self.OPT_API)
		|option_parser.add_option("-p", "--preprocess", action="append", dest="preprocess",
		|	help=self.OPT_PREPROC)
		|option_parser.add_option("-t", "--test", action="store_true", dest="test",
		|	help=self.OPT_TEST)
		|option_parser.add_option("-s", "--source", action="store", dest="source",
		|	help=self.OPT_SOURCE)
		|option_parser.add_option("-S", "--include-source", action="store_true", dest="includeSource",
		|	help=self.OPT_INCLUDE_SOURCE)
		|option_parser.add_option("-D", "--define", action="append", dest="targets",
		|	help=self.OPT_DEFINE)
		|option_parser.add_option("-O", "--options", action="append", dest="passOptions",
		|	help=self.OPT_OPTIONS)
		|option_parser.add_option("-L", "--lib", action="append", dest="libraries",
		|	help=self.OPT_LIB)
		|option_parser.add_option("-I", "--include", action="append", dest="includes",
		|	help=self.OPT_INCLUDES)
		|option_parser.add_option("--ignores", action="append", dest="ignores",
		|	help=self.OPT_IGNORES)
		|option_parser.add_option("-P", "--passes", action="store", dest="passes",
		|	help=self.OPT_PASSES)
		|option_parser.add_option("-V", None, action="store", dest="version",
		|	help=self.OPT_VERSION)
		|options, args = option_parser.parse_args(args=arguments)
		@end
		var language = options lang
		# FIXME: Not sure exactly what to do... the program seems to be
		# shared in the environment, which makes sense, but we should
		# refactor the command methods to have env as parameter.
		var program  = environment program
		# environment getFactory () createProgram ()
		if options cache in ["no", "none", "false", "/dev/null", False]
			environment useCache = False
		elif options cache in ["yes", "true", True]
			environment useCache = True
		else
			environment useCache = True
			environment cache setPath (options cache)
		end
		if os environ get "SUGAR_MODULES"
			let m = os environ ["SUGAR_MODULES"]
			environment options ["modules"] = m
			environment options [m] = True
		end
		if os environ get "SUGAR_BACKEND"
			environment options ["backend"] = os environ ["SUGAR_BACKEND"]
		end
		if options targets
			for option_target in options targets
				var name_value = option_target split ("=", 1)
				if len(name_value) == 1
					environment options [option_target] = True
				else
					environment options [name_target[0]] = name_target[1]
				end
			end
		end
		# FIXME: This should be deprecated
		if options api
			environment addPass ( new passes DocumentationPass() )
		end
		# If we have includes, we parse them before parsing the main module
		if options includes
			for i in options includes
				if os path isfile (i)
					var parsed_module = parseFile (i)
					if parsed_module
						# There might be a parsing error
						program addModule (parsed_module)
					end
				end
			end
		end
		if options source
			# NOTE define
			throw Exception "Not supported yet"
			#parseSource(args[0], options source, options module)
		else
			if options module
				if len(args) > 1
					throw Exception("Only one source file is accepted with the -m option")
				end
			end
			# We parse the source first. At this stage, it's all about creating the AST, so
			# we don't need to have all the dependencies loaded. This will be done at a the
			# program transformation stage.
			for source_path in args
				var result_module = parseFile (source_path, options module)
				if result_module
					# There might have been a parsing error
					program addModule (result_module)
				end
				# REWRITE: language = options get "lang" ? guessLanguage(source_path) ? raise ERR_NOT_LANGUAGE_SPECIFIED
				# We get the language to which we'd like to translate the program to
				if language == "none"
					language = None
				elif not language
					language =  environment options get "backend" or guessLanguage (source_path)
				else
					language = environment normalizeLanguage (language)
				end
			end
		end
		# Add library path and parses libraries given as files
		if options libraries
			for l in options libraries
				if os path isfile (l)
					# Here we annotate as shadow the parts of the imported module that are imported
					# as a library.
					var module = parseFile (l)
					if not module
						return None
					else
						program addModule (module)
						for name_and_value in module getSlots ()
							name_and_value[1] addAnnotation (environment getFactory () annotation "shadow")
						end
					end
				else
					environment addLibraryPath (l)
				end
			end
		end
		if language == "none"
			language = None
		end
		if options passes
			setupPasses (language, options passes split ",", options passOptions or [])
		else
			setupPasses (language, None, options passOptions or [])
		end
		if program getModules ()
			transformProgram (program)
		end
		# We compile, run or simply test
		if options api
			var doc_pass       = environment getPass "Documentation"
			doc_pass setWriter (getWriter "js")
			json_documentation = doc_pass asJSON()
			if options api == "-"
				output write ( json_documentation )
			else
				var f = open(options api, "wb")
				f write (ensureOutput(json_documentation, f))
				f close ()
			end
		elif options compile
			var program_source = writeProgram (program, language, options runtime, options includeSource)
			if not options output
				output write (ensureOutput(program_source, output))
				output write (ensureOutput("\n" , output))
			elif os path isdir (options output)
				var splitter = FileSplitter(options output)
				splitter fromString (program_source)
			else
				var f = open(options output, "ab")
				f write (ensureOutput (program_source, f))
				f close ()
			end
		elif options run
			var program_source = writeProgram (program, language, True, options includeSource)
			var file_and_path = tempfile mkstemp ()
			var f = open (file_and_path[0], "wb")
			f write(ensureOutput (program_source, f))
			f close ()
			var args_str = " " join(args[1:])
			var interpreter = None
			var path = file_and_path[1]
			var compilers = None
			var command   = None
			# FIXME: LambdaFactory should support compilers and runners
			if (language in ["js","javascript","es","ecmascript"])
				interpreter = os getenv("SUGAR_JS") or "js"
				command = interpreter + " " + path + " " + args_str
			elif (language in ["python"])
				interpreter = os getenv("SUGAR_PYTHON") or "python"
				command = interpreter + " " + path + " " + args_str
			end
			if command
				status = (os system(command) / 256) or status
			else
				environment report error ("No command defined to run language: {0}" format (language))
			end
			os unlink(path)
		end
		return program
	@end

	@method parseFile sourcePath, moduleName=None
		return environment parseFile (sourcePath, moduleName)
	@end

	@method parseString text, extension, moduleName=None
		return environment parseString (text, extension, moduleName)
	@end

	@method transformProgram program
		environment runPasses (program)
	@end

	@method guessLanguage sourcePath
		for name_and_value in environment languages items()
			if name_and_value[1] recognizes (sourcePath)
				return name_and_value[0]
			end
		end
		return None
	@end

	@method getWriter language
		if not language
			return None
		end
		let name = language
		language     = environment loadLanguage (language)
		# FIXME: The language should be initialized for the environment
		if language and language writer
			var writer   = language writer ()
			# FIXME: Writer should take environ
			writer report = environment report
			writer setEnvironment (environment)
			return writer
		else
			environment report error ("Language not defined: {0}" format (name))
			return None
		end
	@end

	@method writeProgram program, inLanguage, includeRuntime=False, includeSource=False
		var writer = getWriter (inLanguage)
		if writer
			var program_source = writer run (program)
			return program_source
		else
			return ""
		end
	@end

	@method createEnvironment
		environment = Environment()
	@end

	@method setupEnvironment
	@end

	@method setupPasses language=None, withPasses=None, options=None
		if not withPasses
			environment addPass ( new passes Importation         ())
			environment addPass ( new passes ControlFlow         ())
			environment addPass ( new resolution BasicDataFlow   ())
			environment addPass ( new resolution DataFlowBinding ())
		else
			# We have a custom set of passes
			for the_pass in withPasses
				if the_pass == "std"
					# We add standard passes
					environment addPass ( new passes Importation         ())
					environment addPass ( new passes ControlFlow         ())
					environment addPass ( new resolution BasicDataFlow   ())
					environment addPass ( new resolution DataFlowBinding ())
				elif the_pass find "." == -1
					var pass_class = None
					if hasattr(passes, the_pass)
						pass_class = getattr(passes, the_pass)
					elif hasattr(resolution, the_pass)
						pass_class = getattr(resolution, the_pass)
					else
						environment report error ("LambdaFactory standard pass not found:", the_pass)
						assert (None)
					end
					environment addPass (new pass_class ())
				else
					var module_name = the_pass[0:the_pass rfind (".")]
					exec ("import " + module_name)
					var pass_class = eval (the_pass)
					if pass_class
						environment addPass (new pass_class ())
					else
						environment report error ("Custom pass not found:", the_pass)
						assert (None)
					end
				end
			end
		end
		#  Resolution
		# environment addPass (new passes ResolutionPass() )
		#  Typing
		# environment addPass (new passes TypingPass() )
	@end

@end

# EOF
