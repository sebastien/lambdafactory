@module lambdafactory.modelwriter
@import lambdafactory.interfaces as interfaces
@import isString from lambdafactory.model
@import Pass from lambdafactory.passes
@import SNIP from lambdafactory.splitter
@import string

@shared PREFIX     = "\t"

@function _format value, level=-1
| Format helper operation. See @format
	@embed Python
	|if type(value) in (list, tuple):
	|	res = []
	|	for v in value:
	|		if v is None: continue
	|		res.extend(_format(v, level+1))
	|	return res
	|else:
	|	if value is None: return ""
	|	assert isString(value), "Type not suitable for formatting: %s" % (value)
	|	return ["\n".join((level*PREFIX)+v for v in value.split("\n"))]
	@end
@end

@function format values...
| Formats a combination of string ang tuples. Strings are joined by
| newlines, and the content of the inner tuples gets indented
	return "\n" join (_format(values))
@end

@function _flatten value, res
| Flatten helper operation. See 'flatten'
	if type(value) in [tuple, list]
		for v in value
			_flatten(v, res)
		end
	else
		res append(value)
	end
@end

@function flatten lists...
| Flattens the given lists in a single list
	var res = []
	_flatten(lists, res)
	return res
@end

@function notEmpty p
| Returns None if the given parameter is empty.
	return p and p or None
@end

#------------------------------------------------------------------------------
#
#  Abstract Writer
#
#------------------------------------------------------------------------------

@class AbstractWriter: Pass

	@shared HANDLES = [
		interfaces IProgram
		interfaces IClass
		interfaces IModule
		interfaces IAccessor
		interfaces IMutator
		interfaces IDestructor
		interfaces IConstructor
		interfaces IClassMethod
		interfaces IMethod
		interfaces IFunction
		interfaces IClosure
		interfaces IWithBlock
		interfaces IBlock
		interfaces IModuleAttribute
		interfaces IClassAttribute
		interfaces IAttribute
		interfaces IArgument
		interfaces IParameter
		interfaces IOperator
		interfaces IReference
		interfaces INumber
		interfaces IString
		interfaces IList
		interfaces IDict
		interfaces IEnumeration
		interfaces IAllocation
		interfaces IAssignment
		interfaces IComputation
		interfaces IInvocation
		interfaces IInstanciation
		interfaces IResolution
		interfaces IChain
		interfaces ISelection
		interfaces IRepetition
		interfaces IFilterIteration
		interfaces IMapIteration
		interfaces IIteration
		interfaces IAccessOperation
		interfaces ISliceOperation
		interfaces IEvaluation
		interfaces ITermination
		interfaces INOP
		interfaces IBreaking
		interfaces IContinue
		interfaces IExcept
		interfaces IInterception
		interfaces IImportSymbolOperation
		interfaces IImportSymbolsOperation
		interfaces IImportModuleOperation
		interfaces IImportModulesOperation
		interfaces IEmbed
	]

	@property _generatedSymbols = {}

	@constructor
		#FIXME: Rewrite
		Pass __init__ (self)
	@end

	@method setOption name, value
		self options [name] = value
		return self
	@end

	@method write element
		var res = None
		if element is None
			return ""
		else
			if isString(element)
				return element
			elif element hasAnnotation "shadow"
				# We do not write out shadow elements (like automatic import
				# operations added)
				return ""
			else
				@embed Python
				|this_interfaces = self.HANDLES
				|for  the_interface in this_interfaces:
				|	name = the_interface.__name__[1:]
				|	if isinstance(element, the_interface):
				|		if not hasattr(self, "on" + name ):
				|			raise Exception("Writer does not define write method for: " + name + " in " + str(self))
				|		else:
				|			self.context.append(element)
				|			result = getattr(self, "on" + name)(element)
				|			self.context.pop()
				|			return result
				|raise Exception("Element implements unsupported interface: " + str(element))
				@end
			end
		end
	@end

	@method run program:IProgram
		self program = program
		return self write (program)
	@end

	@method onProgram element
	| Writes a Program element
		var lines = []
		for module in element getModules()
			if not module isImported()
				lines append (self write(module))
			end
		end
		return "\n" join(lines)
	@end

	@method _format values...
		@embed Python
		|return format(*values)
		@end
	@end

	@method _expand values, kw
		@embed Python
		|return [string.Template(_).substitute(**kw) for _ in values]
		@end
	@end

	@method _unique name
		var i = 0
		while True
			new_name = name + str(i)
			if self _generatedSymbols get(new_name) == None
				self _generatedSymbols[new_name] = True
				return new_name
			end
			i += 1
		end
	@end

@end

# EOF
