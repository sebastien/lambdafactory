@module lambdafactory.environment
@import os, sys, pickle, hashlib, imp
@import DefaultReporter from lambdafactory.reporter
@import Factory from lambdafactory.modelbase
@import PassContext from lambdafactory.passes
@import ClearDataFlow from lambdafactory.resolution

# FIXME: User reporter
@function error message
	sys stderr write ("[!] {0}\n" format (message))
@end

@function info message
	sys stderr write ("--- {0}\n" format (message))
@end

# -----------------------------------------------------------------------------
#
# IMPORTER
#
# -----------------------------------------------------------------------------

@class Importer
| The Environment importer class acts like a "hub" for language-specific
| importers. It will try, according to the current environment settings,
| to resolve a module absolute name and return a program model object
| corresponding to the given module.

	@property environment

	@constructor environment
		self environment = environment
	@end

	@method findSugarModule moduleName
		var paths = []
		for path in environment libraryPaths
			paths append (path)
		end
		if os environ get "SUGARPATH"
			paths extend (os environ get "SUGARPATH" split ":")
		end
		var module_path = moduleName replace (".", os path sep)
		for path in paths
			# We normalize the path, so that paths like . and ~/ work fine
			path = os path abspath ( os path expandvars ( os path expanduser (path)))
			for ext in ".sg .sjs .sjava .spnuts .spy" split()
				var file_path = os path join(path, module_path + ext)
				if os path exists(file_path)
					return file_path
				end
			end
		end
		return None
	@end

	@method importModule moduleName
		# FIXME: Should use a module cache, same for parsefile so that we don't re-parse
		# all the time
		var module_path = findSugarModule(moduleName)
		if module_path
			environment report trace ("Importing module", moduleName, "from", module_path)
			#, "from", module_path, "...")
			return importModuleFromFile (module_path, moduleName)
		else
			environment report error ("Module not found:", moduleName)
		end
	@end

	@method importModuleFromFile  modulePath:String, moduleName:String=None
		environment report indent()
		# The module is automatically addded to the program
		var module = environment parseFile (modulePath)
		if moduleName -> module setName (moduleName)
		module setImported (True)
		environment report dedent ()
		return module
	@end

@end

# -----------------------------------------------------------------------------
#
# LANGUAGE
#
# -----------------------------------------------------------------------------

@class Language

	@property name:String
	@property basePath:String
	@property runtime:<Class|None>
	@property importer:<Class|None>
	@property writer:<Class|None>
	@property reader:<Class|None>
	@property runner:<Class|None>
	@property environment
	@property readExtensions = []

	@constructor name, environment
		self environment = environment
		self name = name
		@embed Python
		|assert name, "No language specified"
		@end
		self basePath = basePath
		self runtime  = loadModule "runtime"
		self importer = loadModule "importer"
		self writer   = loadModule "writer"
		self reader   = loadModule "reader"
		self runner   = loadModule "runner"
	@end

	@method addRecognizedExtension extension
		readExtensions append (extension lower())
	@end

	@method recognizes path
		var extension = os path splitext (path)[-1][1:] lower()
		return extension in readExtensions
	@end

	@method loadModule moduleName
	| Dynamically loads the language (sub) module
		try
			var module = None
			@embed Python
			|module_name   = "lambdafactory.languages." + self.name + "." + moduleName
			|root_module   = __import__(module_name)
			|module        = getattr(getattr(getattr(root_module, "languages"), self.name), moduleName)
			@end
			return getattr(module, "MAIN_CLASS")
		catch e
			var error = str(e)
			if not (error startswith "No module")
				environment report error ("Language " + str(name) + ", cannot import module " + str(moduleName) + ": " + str(e))
			end
			return None
		end
	@end

@end

# -----------------------------------------------------------------------------
#
# CACHE
#
# -----------------------------------------------------------------------------

@class Cache
| A cache that allows to store pre-compiled AST and modules.
| Each compiled module is saved in two different locations:
|
| modules/<modulename>.model
| content/<sig>.model

	@property root = "/tmp/lambdafactory-cache-{0}" format (os getuid ())

	@constructor
		for d in [root]
			if not os path exists (d)
				os makedirs (d)
			end
		end
	@end

	@method getKeyForContent content
		return hashlib sha256 (content) hexdigest ()
	@end

	@method hasContent content
		return hasSignature (getKeyForContent (content))
	@end

	@method hasModule name
		return os path exist (_getPathForModuleName(name))
	@end

	@method hasSignature sig
		return os path exist (_getPathForSignature(name))
	@end

	@method getFromContent content
		return getFromSignature (getKeyForContent (content))
	@end

	@method getFromSignature sig
		var p   = _getPathForSignature(sig)
		if os path exists (p)
			var f   = open (p)
			try
				var res = pickle load (f)
			catch e
				error ("Cache.getFromSignature {0}: {1}" format (sig, e))
				res = None
			end
			f close ()
			return res
		else
			return None
		end
	@end

	@method getFromModuleName name
		var p   = _getPathForModuleName(name)
		if os path exists (p)
			var f   = open (p)
			try
				var res = pickle load (f)
			catch e
				error ("Cache.getFromModuleName {0}: {1}" format (sig, e))
				res = None
			end
			f close ()
			return res
		else
			return None
		end
	@end

	@method set sourceAndModule
		var content = sourceAndModule[0]
		var k   = getKeyForContent     (content)
		var p   = _getPathForSignature (k)
		var f   = open (p, "wb")
		try
			pickle dump (sourceAndModule, f)
			# SEE: http://stackoverflow.com/questions/2333872/atomic-writing-to-file-with-python
			f flush () ; os fsync (f fileno ())
			f close ()
		catch e
			f close ()
			os unlink (p)
			error ("Cache.set {0}: {1}" format (k, e))
			return None
		end
		var pm = _getPathForModuleName (sourceAndModule[1] getAbsoluteName ())
		if os path exists (pm)
			os unlink (pm)
		end
		os symlink (p, pm)
		return p
	@end

	@method clean
		# FIXME: Implement
	@end

	@method _getPathForSignature sig
		return  root + "/content-" + sig + ".cache"
	@end

	@method _getPathForModuleName name
		return  root + "/module-" + name + ".cache"
	@end

@end

# -----------------------------------------------------------------------------
#
# ENVIRONMENT
#
# -----------------------------------------------------------------------------

@class Environment
|
| Passes
| ======
|
| Passes are lists of passes (see 'lambdafactory.passes') that transform the
| program. The order of passe is important, as some passes depend on each other.
| It is up to the 'lambdafactory.main.Command' subclass to set up the passes
| appropriately.

	@shared ALIASES = {
		actionscript : ["actionscript", "as", "ascript"]
		javascript   : ["javascript",   "js", "jscript"]
		extern       : ["extern"]
		python       : ["python",       "py"]
		php          : ["php"]
		pnuts        : ["pnuts"]
	}

	@property factory      = None
	@property program      = None
	@property parsers      = {}
	@property passes       = []
	@property writer       = None
	@property report       = DefaultReporter
	@property importer     = None
	@property languages    = {}
	@property libraryPaths = []
	@property options      = {}
	@property cache        = None
	@property useCache     = False

	@constructor
		importer = new Importer (self)
		factory  = new Factory  ()
		cache    = new Cache    ()
		program  = factory createProgram ()
	@end

	@method addLibraryPath path:String
		libraryPaths append(path)
	@end

	@method addParser parser, extensions
		for ext in extensions
			parsers[ext lower()] = parser
		end
	@end

	@method addImporter importer
		# TODO: Support for multiple importers
		# self importer = importer
	@end

	@method addPass programPass
		passes append (programPass)
		programPass setEnvironment (self)
	@end

	@method getPass name
		name = name lower()
		for p in passes
			if p getName() lower() == name
				return p
			end
		end
	@end

	@method getPasses
		return passes
	@end

	@method runPasses program
		for p in passes
			report trace ("Running pass {0}" format (p __class__ __name__))
			p run (program)
		end
	@end

	@method getFactory
		return factory
	@end

	@method importModule moduleName, importModule=True
		assert (program)
		if importModule and (not program hasModuleWithName (moduleName))
			var module = importer importModule (moduleName)
			if module
				program addModule (module)
			end
			return module
		else
			return program getModule (moduleName)
		end
	@end

	# TODO: Cache should be per parser
	@method parseFile path, moduleName=None
		var f    = open (path, "rb")
		var text = f read ()
		f close ()
		return parseString (text, path, moduleName)
	@end

	@method parseString text, path, moduleName=None
		var source_and_module = cache getFromContent (text)
		if (not useCache) or (not source_and_module)
			var extension           = path split "." [-1]
			var parser              = parsers get (extension)
			if not parser -> parser = parsers get "sg"
			source_and_module       = parser parseString (text, moduleName, path)
			if source_and_module[1]
				# assert (isinstance (source_and_module[1]), interfaces IElement)
				var res                 = [source_and_module[0], source_and_module[1] copy () detach ()]
				assert (res[0] == text)
				res[1] setSource (res[0])
				if useCache
					cache set (res)
				end
			else
				error ("Could not parse file: " + path)
			end
		else
			info ("Parsing from cache {0}: {1}" format (cache getKeyForContent (source_and_module[0]), path))
			# We need to strip the dataflow from the module on importing (we actually should do it on save)
			var clear_dataflow = new ClearDataFlow ()
			clear_dataflow run (source_and_module[1])
		end
		return source_and_module[1]
	@end

	# FIXME: The language should be initialized for the environment
	@method listAvailableLanguages
	| Returns a list of available languages by introspecting the modules
		var base_dir = os path join(os path dirname(os path abspath (__file__)),"languages")
		var languages = []
		for name in os listdir(base_dir)
			if (not name startswith ".") and (os path isdir(os path join(base_dir, name))) and (not name startswith "_")
				languages append (name)
			end
		end
		return languages
	@end

	@method loadLanguages
		for language in listAvailableLanguages()
			loadLanguage (language)
		end
	@end

	@method normalizeLanguage name
		for key_values  in ALIASES items ()
			var key    = key_values[0]
			var values = key_values[1]
			if key == name
				return key
			else
				for v in values
					if v == name
						return key
					end
				end
			end
		end
		return None
	@end

	@method loadLanguage name
	@as internal
	| Loads the given language plug-in and returns a dictionary containing
	| its features.
		name = normalizeLanguage (name)
		if not (name in languages keys ())
			var language =  new Language(name, self)
			languages[name] = language
		end
		return languages[name]
	@end

@end

# EOF
