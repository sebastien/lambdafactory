@module lambdafactory.environment
@import os, stat, sys, pickle, hashlib, imp
@import DefaultReporter from lambdafactory.reporter
@import Factory from lambdafactory.modelbase
@import PassContext from lambdafactory.passes
@import ClearDataFlow from lambdafactory.resolution

# FIXME: User reporter
@function error message
	sys stderr write ("[!] {0}\n" format (message))
@end

@function info message
	sys stderr write ("--- {0}\n" format (message))
@end

# -----------------------------------------------------------------------------
#
# IMPORTER
#
# -----------------------------------------------------------------------------

@class Importer
| The Environment importer class acts like a "hub" for language-specific
| importers. It will try, according to the current environment settings,
| to resolve a module absolute name and return a program model object
| corresponding to the given module.

	@property environment

	@constructor environment
		self environment = environment
	@end

	@method findSugarModule moduleName, paths=None
	| Finds the module with the given name in the given ppaths
		var exts = [".sg", ".sjs", ".sjava", ".spnuts", ".spy"]
		paths = (paths or []) + environment libraryPaths
		if os environ get "SUGARPATH"
			paths extend (os environ get "SUGARPATH" split ":")
		end
		var module_path = moduleName replace (".", os path sep)
		for path in paths
			# We normalize the path, so that paths like . and ~/ work fine
			path = os path abspath ( os path expandvars ( os path expanduser (path)))
			for ext in exts
				var file_path = os path join(path, module_path + ext)
				if os path exists(file_path)
					return file_path
				end
			end
		end
		return None
	@end

	# FIXME: This should be language specific
	@method importModule moduleName
		# FIXME: Should use a module cache, same for parsefile so that we don't re-parse
		# all the time
		var module_path = findSugarModule (moduleName)
		if module_path
			environment report trace ("Importing module", moduleName, "from", module_path)
			#, "from", module_path, "...")
			return importModuleFromFile (module_path, moduleName)
		else
			environment report error ("Module not found:", moduleName)
		end
	@end

	@method importModuleFromFile  modulePath:String, moduleName:String=None
		environment report indent()
		# The module is automatically addded to the program
		var module = environment parseFile (modulePath)
		if module
			if moduleName -> module setName (moduleName)
			module setImported (True)
		else
			environment report error ("Cannot parse module:", moduleName)
		end
		environment report dedent ()
		return module
	@end

@end

# -----------------------------------------------------------------------------
#
# LANGUAGE
#
# -----------------------------------------------------------------------------

@class Language

	@property name:String
	@property basePath:String
	@property runtime:<Class|None>
	@property importer:<Class|None>
	@property writer:<Class|None>
	@property reader:<Class|None>
	@property runner:<Class|None>
	@property environment
	@property readExtensions = []

	@constructor name, environment
		self environment = environment
		self name = name
		@embed Python
		|assert name, "No language specified"
		@end
		self basePath = basePath
		self runtime  = loadModule "runtime"
		self importer = loadModule "importer"
		self writer   = loadModule "writer"
		self reader   = loadModule "reader"
		self runner   = loadModule "runner"
	@end

	@method addRecognizedExtension extension
		readExtensions append (extension lower())
	@end

	@method recognizes path
		var extension = os path splitext (path)[-1][1:] lower()
		return extension in readExtensions
	@end

	@method loadModule moduleName
	| Dynamically loads the language (sub) module
		try
			var module = None
			@embed Python
			|module_name = "lambdafactory.languages." + self.name + "." + moduleName
			|root_module = __import__(module_name)
			|module      = getattr(getattr(getattr(root_module, "languages"), self.name), moduleName)
			@end
			return getattr(module, "MAIN_CLASS")
		catch e
			var error = str(e)
			if not (error startswith "No module")
				environment report error ("Language " + str(name) + ", cannot import module " + str(moduleName) + ": " + str(e))
			end
			return None
		end
	@end

@end

# -----------------------------------------------------------------------------
#
# CACHE
#
# -----------------------------------------------------------------------------

@class Cache
| A cache that allows to store pre-compiled AST and modules.
| Each compiled module is saved in two different locations:
|
| modules/<modulename>.model
| content/<sig>.model

	@property root

	@constructor
		var cache_path = os path expanduser "~/.cache/lambdafactory"
		if "LF_CACHE" in os environ
			cache_path = os environ ["LF_CACHE"]
		end
		setPath (cache_path)
	@end

	@method setPath root
		if not os path exists (root)
			os makedirs (root)
		end
		self root = root
		return self
	@end

	@method key content
		return hashlib sha256 (content) hexdigest ()
	@end

	@method has sig
		return _exists (_getPathForSignature(sig))
	@end

	@method get sig
		var p   = _getPathForSignature(sig)
		if os path exists (p)
			var f   = open (p)
			try
				# FIXME: Somehow there are issues with restoring the
				# module in Py3K
				var res = pickle load (f)
				f close ()
			catch e
				error ("Cache error: {0}: {1}" format (sig, e))
				f close ()
				os unlink (p)
				res = None
			end
			return res
		else
			return None
		end
	@end

	@method set key, module
		var k   = key
		var p   = _getPathForSignature (k)
		var f   = open (p, "wb")
		try
			pickle dump (module, f, pickle HIGHEST_PROTOCOL)
			# SEE: http://stackoverflow.com/questions/2333872/atomic-writing-to-file-with-python
			f flush () ; os fsync (f fileno ())
			f close ()
		catch e
			f close ()
			# os unlink (p)
			error ("Cache.set {0}: {1}" format (k, e))
			return None
		end
		var pm = _getPathForModuleName (module getAbsoluteName ())
		if os path exists (pm)
			os unlink (pm)
		end
		os symlink (p, pm)
		return p
	@end

	@method clean
		# FIXME: Implement
	@end

	@method _getPathForSignature sig
		return  root + "/content-" + sig + ".cache"
	@end

	@method _getPathForModuleName name
		return  root + "/module-" + name + ".cache"
	@end

	@method _exists path
	| Tests if the given path exists and has been created less than 24h ago.
	| If it's too old, it will be removed.
		if not os path exists (path)
			return False
		else
			mtime = os stat (path) [stat ST_MTIME]
			if time time () - mtime < 60 * 60 * 24
				return True
			else
				os unlink (path)
				return False
			end
		end
	@end

@end

# -----------------------------------------------------------------------------
#
# ENVIRONMENT
#
# -----------------------------------------------------------------------------

@class Environment
|
| Passes
| ======
|
| Passes are lists of passes (see 'lambdafactory.passes') that transform the
| program. The order of passe is important, as some passes depend on each other.
| It is up to the 'lambdafactory.main.Command' subclass to set up the passes
| appropriately.

	@shared ALIASES = {
		javascript   : ["javascript",   "js", "jscript"]
		ecmascript   : ["ecmascript",   "es", "escript"]
		python       : ["python",       "py"]
	}

	@property factory      = None
	@property program      = None
	@property parsers      = {}
	@property passes       = []
	@property writer       = None
	@property report       = DefaultReporter
	@property importer     = None
	@property languages    = {}
	@property libraryPaths = []
	@property options      = {}
	@property cache        = None
	@property useCache     = True

	@constructor
		importer = new Importer (self)
		factory  = new Factory  ()
		cache    = new Cache    ()
		program  = factory createProgram ()
	@end

	@method addLibraryPath path:String
		libraryPaths append(path)
	@end

	@method addParser parser, extensions
		for ext in extensions
			parsers[ext lower()] = parser
		end
	@end

	# @method addImporter importer
	# 	# TODO: Support for multiple importers
	# 	# self importer = importer
	# 	pass
	# @end
	# @method addPass programPass
	# 	passes append (programPass)
	# 	programPass setEnvironment (self)
	# @end


	@method addPass programPass
		@embed Python
		|self.passes.append(programPass)
		@end
		programPass setEnvironment (self)
	@end

	@method getPass name
		name = name lower()
		for p in passes
			if p getName() lower() == name
				return p
			end
		end
	@end

	@method getPasses
		return passes
	@end

	@method runPasses program
		for p in passes
			report trace ("Running pass {0}" format (p __class__ __name__))
			p run (program)
		end
	@end

	@method getFactory
		return factory
	@end

	@method importModule moduleName, importModule=True
		assert (program)
		if importModule and (not program hasModuleWithName (moduleName))
			var module = importer importModule (moduleName)
			if module
				program addModule (module)
			end
			return module
		else
			return program getModule (moduleName)
		end
	@end

	# TODO: Cache should be per parser
	@method parseFile path, moduleName=None
		var f    = open (path, "rb")
		var text = f read ()
		f close ()
		return parseString (text, path, moduleName)
	@end

	@method parseString text, path, moduleName=None
		let cache_key = cache key (text)
		var module    = cache get (cache_key)
		if (not useCache) or (not module)
			var extension           = path split "." [-1]
			var parser              = parsers get (extension)
			if not parser -> parser = parsers get "sg"
			# We make sure the text is an UTF string
			# text = text decode "utf-8"
			# NOTE: This does not apply any pass
			var source_and_module   = parser parseString (text, moduleName, path)
			module = source_and_module[1]
			assert (source_and_module[0] == text)
			if source_and_module[1]
				# assert (isinstance (source_and_module[1]), interfaces IElement)
				# NOTE: Before we were copying and detaching the module before storing
				# it in cache, but it's not doing any good. In particular, the copy
				# is only shallow, and won't reset the parent properly.
				var res = source_and_module[1]
				res setSource (text)
				if useCache
					cache set (cache_key, res)
				end
			else
				error ("Could not parse file: " + path)
			end
		else
			assert (module getDataFlow () is None)
			# NOTE: Before we were stripping the dataflow, but given that the module
			# is cached BEFORE any pass is applied, this should be equivalent.
		end
		return module
	@end

	# FIXME: The language should be initialized for the environment
	@method listAvailableLanguages
	| Returns a list of available languages by introspecting the modules
		var base_dir = os path join(os path dirname(os path abspath (__file__)),"languages")
		var languages = []
		for name in os listdir(base_dir)
			if (not name startswith ".") and (os path isdir(os path join(base_dir, name))) and (not name startswith "_")
				languages append (name)
			end
		end
		return languages
	@end

	@method loadLanguages
		for language in listAvailableLanguages()
			loadLanguage (language)
		end
	@end

	@method normalizeLanguage name
		for key_values  in ALIASES items ()
			var key    = key_values[0]
			var values = key_values[1]
			if key == name
				return key
			else
				for v in values
					if v == name
						return key
					end
				end
			end
		end
		return name
	@end

	@method loadLanguage name
	| Loads the given language plug-in and returns a dictionary containing
	| its features.
		if name == "none" or (not name)
			return None
		end
		name = normalizeLanguage (name)
		if not (name in languages keys ())
			var language =  new Language(name, self)
			languages[name] = language
		end
		return languages[name]
	@end

@end

# EOF
